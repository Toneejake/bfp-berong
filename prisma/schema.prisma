generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          Int            @id @default(autoincrement())
  email       String         @unique
  password    String
  name        String
  age         Int
   role        UserRole       @default(guest)
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  blogPosts   BlogPost[]
  quizResults QuizResult[]
  progress    UserProgress[]

  @@map("users")
}

model QuickQuestion {
  id           Int                   @id @default(autoincrement())
  category     QuickQuestionCategory
  questionText String
  responseText String
  order        Int                   @default(0)
  isActive     Boolean               @default(true)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  @@map("quick_questions")
}

model CarouselImage {
  id        Int      @id @default(autoincrement())
  title     String
  altText   String
  imageUrl  String
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carousel_images")
}

model BlogPost {
  id          Int             @id @default(autoincrement())
  title       String
  excerpt     String
  content     String
  imageUrl    String?
  category    ContentCategory
  authorId    Int
  isPublished Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  author      User            @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("blog_posts")
}

model Video {
  id          Int             @id @default(autoincrement())
  title       String
  description String?
  youtubeId   String
  category    ContentCategory
  duration    String?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("videos")
}

model KidsModule {
  id          Int            @id @default(autoincrement())
  title       String
  description String?
  dayNumber   Int            @unique
  content     String
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  progress    UserProgress[]

  @@map("kids_modules")
}

model UserProgress {
  id          Int        @id @default(autoincrement())
  userId      Int
  moduleId    Int
  completed   Boolean    @default(false)
  score       Int        @default(0)
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  module      KidsModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
  @@map("user_progress")
}

model QuizResult {
  id          Int      @id @default(autoincrement())
  userId      Int
  quizType    String
  score       Int      @default(0)
  maxScore    Int      @default(0)
  completedAt DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quiz_results")
}

enum UserRole {
  guest
  kid
  adult
  professional
  admin
}

enum ContentCategory {
  kids
  adult
  professional
}

enum QuickQuestionCategory {
  emergency
  prevention
  equipment
  general
}
